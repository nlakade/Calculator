@Test
public void testEmptyString() {
    StringCalculator calculator = new StringCalculator();
    assertEquals(0, calculator.add(""));
}
@Test
public void testSingleNumber() {
    StringCalculator calculator = new StringCalculator();
    assertEquals(1, calculator.add("1"));
}
@Test
public void testTwoNumbers() {
    StringCalculator calculator = new StringCalculator();
    assertEquals(6, calculator.add("1,5"));
}
@Test
public void testMultipleNumbers() {
    StringCalculator calculator = new StringCalculator();
    assertEquals(10, calculator.add("1,2,3,4"));
}
@Test
public void testNewLineDelimiter() {
    StringCalculator calculator = new StringCalculator();
    assertEquals(6, calculator.add("1\n2,3"));
}
@Test
public void testCustomDelimiter() {
    StringCalculator calculator = new StringCalculator();
    assertEquals(6, calculator.add("//;\n1;2;3"));
}
@Test
public void testCustomDelimiterWithNewLine() {
    StringCalculator calculator = new StringCalculator();
    assertEquals(10, calculator.add("//;\n1;2\n3;4"));
}
@Test
public void testLargeNumbers() {
    StringCalculator calculator = new StringCalculator();
    assertEquals(10000, calculator.add("10000"));
}
@Test
public void testNegativeNumber() {
    StringCalculator calculator = new StringCalculator();
    IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
        calculator.add("1,-2,3");
    });
    assertTrue(thrown.getMessage().contains("negative numbers not allowed -2"));
}
@Test
public void testMultipleNegativeNumbers() {
    StringCalculator calculator = new StringCalculator();
    IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
        calculator.add("1,-2,-3");
    });
    assertTrue(thrown.getMessage().contains("negative numbers not allowed -2,-3"));
}
@Test
public void testInvalidCustomDelimiterFormat() {
    StringCalculator calculator = new StringCalculator();
    IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
        calculator.add("//;\n1;2\n3,4;invalid");
    });
    assertTrue(thrown.getMessage().contains("negative numbers not allowed -1,-2"));
}
@Test
public void testCustomDelimiterWithSpecialCharacters() {
    StringCalculator calculator = new StringCalculator();
    assertEquals(6, calculator.add("//[***]\n1***2***3"));
}
@Test
public void testEmptyDelimiter() {
    StringCalculator calculator = new StringCalculator();
    IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
        calculator.add("//\n1,2");
    });
    assertTrue(thrown.getMessage().contains("negative numbers not allowed"));
}
